// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_loop_height1_pr_HH_
#define _Loop_loop_height1_pr_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_loop_height1_pr : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > imag0_0_data_stream_0_V_din;
    sc_in< sc_logic > imag0_0_data_stream_0_V_full_n;
    sc_out< sc_logic > imag0_0_data_stream_0_V_write;
    sc_out< sc_lv<8> > imag0_0_data_stream_1_V_din;
    sc_in< sc_logic > imag0_0_data_stream_1_V_full_n;
    sc_out< sc_logic > imag0_0_data_stream_1_V_write;
    sc_out< sc_lv<8> > imag0_0_data_stream_2_V_din;
    sc_in< sc_logic > imag0_0_data_stream_2_V_full_n;
    sc_out< sc_logic > imag0_0_data_stream_2_V_write;


    // Module declarations
    Loop_loop_height1_pr(sc_module_name name);
    SC_HAS_PROCESS(Loop_loop_height1_pr);

    ~Loop_loop_height1_pr();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > imag0_0_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_2_i_reg_399;
    sc_signal< sc_logic > imag0_0_data_stream_1_V_blk_n;
    sc_signal< sc_logic > imag0_0_data_stream_2_V_blk_n;
    sc_signal< sc_lv<11> > t_V_1_reg_114;
    sc_signal< sc_lv<1> > tmp_i_fu_312_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_V_fu_318_p2;
    sc_signal< sc_lv<10> > i_V_reg_390;
    sc_signal< sc_lv<1> > tmp_1_i_fu_324_p2;
    sc_signal< sc_lv<1> > tmp_1_i_reg_395;
    sc_signal< sc_lv<1> > tmp_2_i_fu_330_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > j_V_fu_336_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_4_i_fu_342_p2;
    sc_signal< sc_lv<1> > grp_fu_276_p2;
    sc_signal< sc_lv<1> > grp_fu_282_p2;
    sc_signal< sc_lv<1> > grp_fu_288_p2;
    sc_signal< sc_lv<1> > grp_fu_294_p2;
    sc_signal< sc_lv<1> > grp_fu_300_p2;
    sc_signal< sc_lv<8> > storemerge3_fu_348_p3;
    sc_signal< sc_lv<8> > storemerge_fu_356_p3;
    sc_signal< sc_lv<8> > storemerge1_fu_364_p3;
    sc_signal< sc_lv<8> > storemerge2_cast_fu_378_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<10> > t_V_reg_103;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_4_reg_125;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_4_reg_125;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_5_reg_176;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_5_reg_176;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_6_reg_225;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_6_reg_225;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > grp_fu_306_p2;
    sc_signal< sc_lv<1> > not_tmp_15_i_fu_372_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_40;
    static const sc_lv<11> ap_const_lv11_140;
    static const sc_lv<11> ap_const_lv11_1E0;
    static const sc_lv<11> ap_const_lv11_280;
    static const sc_lv<11> ap_const_lv11_320;
    static const sc_lv<11> ap_const_lv11_3C0;
    static const sc_lv<11> ap_const_lv11_460;
    static const sc_lv<10> ap_const_lv10_3C0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_1E0;
    static const sc_lv<11> ap_const_lv11_500;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<11> ap_const_lv11_A0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_reg_pp0_iter0_tmp_4_reg_125();
    void thread_ap_phi_reg_pp0_iter0_tmp_5_reg_176();
    void thread_ap_phi_reg_pp0_iter0_tmp_6_reg_225();
    void thread_ap_ready();
    void thread_grp_fu_276_p2();
    void thread_grp_fu_282_p2();
    void thread_grp_fu_288_p2();
    void thread_grp_fu_294_p2();
    void thread_grp_fu_300_p2();
    void thread_grp_fu_306_p2();
    void thread_i_V_fu_318_p2();
    void thread_imag0_0_data_stream_0_V_blk_n();
    void thread_imag0_0_data_stream_0_V_din();
    void thread_imag0_0_data_stream_0_V_write();
    void thread_imag0_0_data_stream_1_V_blk_n();
    void thread_imag0_0_data_stream_1_V_din();
    void thread_imag0_0_data_stream_1_V_write();
    void thread_imag0_0_data_stream_2_V_blk_n();
    void thread_imag0_0_data_stream_2_V_din();
    void thread_imag0_0_data_stream_2_V_write();
    void thread_j_V_fu_336_p2();
    void thread_not_tmp_15_i_fu_372_p2();
    void thread_storemerge1_fu_364_p3();
    void thread_storemerge2_cast_fu_378_p3();
    void thread_storemerge3_fu_348_p3();
    void thread_storemerge_fu_356_p3();
    void thread_tmp_1_i_fu_324_p2();
    void thread_tmp_2_i_fu_330_p2();
    void thread_tmp_4_i_fu_342_p2();
    void thread_tmp_i_fu_312_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
